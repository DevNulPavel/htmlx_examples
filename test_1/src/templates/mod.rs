use crate::data::user::User;
use askama::Template;

///////////////////////////////////////////////////////////////////////////////////////////////

#[derive(Template)]
#[template(path = "user.html")]
pub(crate) struct UserPage<'a, 'b> {
    pub(crate) message: Option<&'b str>,
    pub(crate) user: &'a User,
}

///////////////////////////////////////////////////////////////////////////////////////////////

#[derive(Template)]
#[template(path = "not_found.html")]
pub(crate) struct NotFoundPage {}

///////////////////////////////////////////////////////////////////////////////////////////////

#[derive(Template)]
#[template(path = "error.html")]
pub(crate) struct ErrorPage {}

///////////////////////////////////////////////////////////////////////////////////////////////

#[derive(Template)]
#[template(path = "users.html")]
pub(crate) struct IndexPage<'a, I>
where
    I: Iterator<Item = &'a User> + Clone,
{
    pub(crate) users: I,
}

///////////////////////////////////////////////////////////////////////////////////////////////

// #[derive(Template)]
// #[template(path = "events.html")]
// struct EventsTemplate {
//     events: Vec<Event>,
// }
